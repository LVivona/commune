[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "commune"
version = "0.0.1"
readme = { file = "README.md", content-type = "text/markdown"}
description = "Gobal toolbox that allows you to connect, and verify your tools"
license = { file = "LICENCE.md" }
authors = [
    {"name" = "commune ai organization", email = "developer@communeai.org"}
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
keywords = []
requires-python = ">3.9"
dependencies = [
    "fastapi",
    "sse-starlette",
    "paramiko",
    "nest_asyncio",
    "uvicorn",
    "scalecodec>=1.2.10,<1.3",
    "asyncio",
    "aiofiles",
    "aiohttp",
    "pytest",
    "openai",
    "torch",
    "safetensors",
    "msgpack_numpy",
    "munch",
    "retry",
    "netaddr",
    "typer",
    "loguru",
    "pyyaml",
    "pandas",
    "websocket-client>=0.57.0",
    "base58>=1.0.3",
    "certifi>=2019.3.9",
    "idna>=2.1.0",
    "requests>=2.21.0",
    "xxhash>=1.3.0",
    "ecdsa>=0.17.0",
    "eth-keys>=0.2.1",
    "eth_utils>=1.3.0",
    "pycryptodome>=3.11.0",
    "PyNaCl>=1.0.1",
    "scalecodec>=1.2.10",
    "py-sr25519-bindings>=0.2.0",
    "py-ed25519-zebra-bindings>=1.0",
    "py-bip39-bindings>=0.1.9",
    "twine",
    "psutil"
]


[project.scripts]
commune = "commune.cli:main"


[tool.setuptools]
packages = ["commune"]
package-dir = { "" = "commune" }
# optional-dependencies = { dev = { file = "requirements-dev.txt" } }

[tool.setuptools.package-data]
commune = ["*.py"]

[tool.mypy]
files = [
    "commune"
]

[tool.pytest.ini_options]
addopts = [
  "--tb=short",                # Short traceback format
  "--cov=rsrt.option",         # Coverage for option.py
  "--cov=rsrt.result",         # Coverage for result.py
  "--cov=tests",               # Ensure test coverage is included
  "--cov-report=term",         # Show coverage report in terminal
  "--cov-report=xml",          # Generate XML coverage report
]
testpaths = [
  "tests",                      # Specify the tests folder
]
